const page = `PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbiI+DQogIDxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPg0KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiAvPg0KICAgIDxtZXRhDQogICAgICBuYW1lPSJkZXNjcmlwdGlvbiINCiAgICAgIGNvbnRlbnQ9IlRyYWNrIG9ubGluZSB1c2VycyBhbmQgc3RhdHMgaW4gcmVhbCB0aW1lIHVzaW5nIHRoZSBBbGltYWQgTGl2ZSBBUEkuIg0KICAgIC8+DQogICAgPG1ldGEgbmFtZT0icm9ib3RzIiBjb250ZW50PSJpbmRleCwgZm9sbG93IiAvPg0KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iTGl2ZSBBUEkiIC8+DQogICAgPG1ldGENCiAgICAgIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiINCiAgICAgIGNvbnRlbnQ9IlRyYWNrIG9ubGluZSB1c2VycyBhbmQgc3RhdHMgaW4gcmVhbCB0aW1lIHVzaW5nIHRoZSBBbGltYWQgTGl2ZSBBUEkuIg0KICAgIC8+DQogICAgPG1ldGENCiAgICAgIHByb3BlcnR5PSJvZzppbWFnZSINCiAgICAgIGNvbnRlbnQ9Imh0dHBzOi8vY2RuLWljb25zLXBuZy5mcmVlcGlrLmNvbS8yNTYvMTE3NjIvMTE3NjI0ODMucG5nIg0KICAgIC8+DQogICAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly9saXZlLmFsaW1hZC54eXoiIC8+DQogICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vbGl2ZS5hbGltYWQueHl6LyIgLz4NCiAgICA8bGluayByZWw9Imljb24iIGhyZWY9Imh0dHBzOi8vY2RuLWljb25zLXBuZy5mcmVlcGlrLmNvbS8yNTYvMTE3NjIvMTE3NjI0ODMucG5nIiAvPg0KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6Y2FyZCIgY29udGVudD0ic3VtbWFyeSIgLz4NCiAgICA8dGl0bGU+TGl2ZSBBUEk8L3RpdGxlPg0KICAgIDxzdHlsZT4NCiAgICAgIDpyb290IHsNCiAgICAgICAgLS1wcmltYXJ5OiAjNENBRjUwOw0KICAgICAgICAtLXNlY29uZGFyeTogIzIxOTZGMzsNCiAgICAgICAgLS1kYXJrLWJnOiAjMTExOw0KICAgICAgICAtLWRhcmtlci1iZzogIzBhMGEwYTsNCiAgICAgICAgLS1saWdodC10ZXh0OiAjZWVlOw0KICAgICAgICAtLWxpZ2h0ZXItdGV4dDogI2Y1ZjVmNTsNCiAgICAgICAgLS1jb2RlLWJnOiAjMjIyOw0KICAgICAgICAtLWVycm9yOiAjZjQ0MzM2Ow0KICAgICAgICAtLXdhcm5pbmc6ICNmZjk4MDA7DQogICAgICB9DQoNCiAgICAgIGJvZHkgew0KICAgICAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgc3lzdGVtLXVpLCAtYXBwbGUtc3lzdGVtLCBzYW5zLXNlcmlmOw0KICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kYXJrLWJnKTsNCiAgICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LXRleHQpOw0KICAgICAgICBsaW5lLWhlaWdodDogMS42Ow0KICAgICAgICBtYXgtd2lkdGg6IDkwMHB4Ow0KICAgICAgICBtYXJnaW46IDAgYXV0bzsNCiAgICAgICAgcGFkZGluZzogMnJlbSAxLjVyZW07DQogICAgICB9DQoNCiAgICAgIGhlYWRlciB7DQogICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzOw0KICAgICAgICBwYWRkaW5nLWJvdHRvbTogMXJlbTsNCiAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTsNCiAgICAgIH0NCg0KICAgICAgaDEgew0KICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7DQogICAgICAgIGZvbnQtc2l6ZTogMi41cmVtOw0KICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07DQogICAgICB9DQoNCiAgICAgIGgyIHsNCiAgICAgICAgY29sb3I6IHZhcigtLXByaW1hcnkpOw0KICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzMzMzsNCiAgICAgICAgcGFkZGluZy1ib3R0b206IDAuNXJlbTsNCiAgICAgICAgbWFyZ2luLXRvcDogMnJlbTsNCiAgICAgIH0NCg0KICAgICAgaDMgew0KICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5KTsNCiAgICAgICAgbWFyZ2luLXRvcDogMS41cmVtOw0KICAgICAgfQ0KDQogICAgICBhIHsNCiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeSk7DQogICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCiAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4yczsNCiAgICAgIH0NCg0KICAgICAgYTpob3ZlciB7DQogICAgICAgIGNvbG9yOiAjNjRiNWY2Ow0KICAgICAgfQ0KDQogICAgICBjb2RlLCBwcmUgew0KICAgICAgICBmb250LWZhbWlseTogJ0NvbnNvbGFzJywgJ01vbmFjbycsICdDb3VyaWVyIE5ldycsIG1vbm9zcGFjZTsNCiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29kZS1iZyk7DQogICAgICAgIHBhZGRpbmc6IDAuMnJlbSAwLjRyZW07DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCiAgICAgICAgZm9udC1zaXplOiAwLjllbTsNCiAgICAgIH0NCg0KICAgICAgcHJlIHsNCiAgICAgICAgcGFkZGluZzogMXJlbTsNCiAgICAgICAgb3ZlcmZsb3cteDogYXV0bzsNCiAgICAgICAgbGluZS1oZWlnaHQ6IDEuNDsNCiAgICAgIH0NCg0KICAgICAgLmNhcmQgew0KICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kYXJrZXItYmcpOw0KICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7DQogICAgICAgIHBhZGRpbmc6IDEuNXJlbTsNCiAgICAgICAgbWFyZ2luOiAxcmVtIDA7DQogICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMik7DQogICAgICB9DQoNCiAgICAgIC5zdGF0dXMtaW5kaWNhdG9yIHsNCiAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgICAgIGdhcDogMC41cmVtOw0KICAgICAgICBmb250LXdlaWdodDogNTAwOw0KICAgICAgfQ0KDQogICAgICAuc3RhdHVzLWRvdCB7DQogICAgICAgIHdpZHRoOiAxMnB4Ow0KICAgICAgICBoZWlnaHQ6IDEycHg7DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsNCiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZXJyb3IpOw0KICAgICAgfQ0KDQogICAgICAuc3RhdHVzLWRvdC5vbmxpbmUgew0KICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5KTsNCiAgICAgIH0NCg0KICAgICAgLmVuZHBvaW50IHsNCiAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTsNCiAgICAgIH0NCg0KICAgICAgLmVuZHBvaW50LXRpdGxlIHsNCiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtOw0KICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5KTsNCiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOw0KICAgICAgfQ0KDQogICAgICAuZW5kcG9pbnQtbWV0aG9kIHsNCiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgICAgICBiYWNrZ3JvdW5kOiAjMzMzOw0KICAgICAgICBwYWRkaW5nOiAwLjJyZW0gMC41cmVtOw0KICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7DQogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTsNCiAgICAgIH0NCg0KICAgICAgLmVuZHBvaW50LXVybCB7DQogICAgICAgIGNvbG9yOiB2YXIoLS1saWdodC10ZXh0KTsNCiAgICAgIH0NCg0KICAgICAgLnJlc3BvbnNlLWV4YW1wbGUgew0KICAgICAgICBtYXJnaW4tdG9wOiAxcmVtOw0KICAgICAgfQ0KDQogICAgICBpbnB1dCwgdGV4dGFyZWEgew0KICAgICAgICB3aWR0aDogMTAwJTsNCiAgICAgICAgcGFkZGluZzogMC43NXJlbTsNCiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZGFya2VyLWJnKTsNCiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzMzMzsNCiAgICAgICAgY29sb3I6IHZhcigtLWxpZ2h0LXRleHQpOw0KICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7DQogICAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0Ow0KICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtOw0KICAgICAgICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4yczsNCiAgICAgIH0NCg0KICAgICAgaW5wdXQ6Zm9jdXMsIHRleHRhcmVhOmZvY3VzIHsNCiAgICAgICAgb3V0bGluZTogbm9uZTsNCiAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnkpOw0KICAgICAgfQ0KDQogICAgICBpbnB1dC5lcnJvciB7DQogICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tZXJyb3IpOw0KICAgICAgfQ0KDQogICAgICAuZXJyb3ItdGV4dCB7DQogICAgICAgIGNvbG9yOiB2YXIoLS1lcnJvcik7DQogICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07DQogICAgICB9DQoNCiAgICAgIC5zdWNjZXNzLXRleHQgew0KICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7DQogICAgICB9DQoNCiAgICAgIC5jb3B5LWJ0biB7DQogICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXNlY29uZGFyeSk7DQogICAgICAgIGNvbG9yOiB3aGl0ZTsNCiAgICAgICAgYm9yZGVyOiBub25lOw0KICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsNCiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgICAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4yczsNCiAgICAgICAgbWFyZ2luLXRvcDogMC41cmVtOw0KICAgICAgfQ0KDQogICAgICAuY29weS1idG46aG92ZXIgew0KICAgICAgICBiYWNrZ3JvdW5kOiAjMGQ4YmYyOw0KICAgICAgfQ0KDQogICAgICAuZ3JpZCB7DQogICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMzAwcHgsIDFmcikpOw0KICAgICAgICBnYXA6IDEuNXJlbTsNCiAgICAgICAgbWFyZ2luOiAxLjVyZW0gMDsNCiAgICAgIH0NCg0KICAgICAgLmdyaWQtaXRlbSB7DQogICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWRhcmtlci1iZyk7DQogICAgICAgIHBhZGRpbmc6IDFyZW07DQogICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsNCiAgICAgIH0NCg0KICAgICAgZGV0YWlscyB7DQogICAgICAgIG1hcmdpbjogMXJlbSAwOw0KICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kYXJrZXItYmcpOw0KICAgICAgICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsNCiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4Ow0KICAgICAgfQ0KDQogICAgICBzdW1tYXJ5IHsNCiAgICAgICAgY3Vyc29yOiBwb2ludGVyOw0KICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgb3V0bGluZTogbm9uZTsNCiAgICAgIH0NCg0KICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7DQogICAgICAgIGJvZHkgew0KICAgICAgICAgIHBhZGRpbmc6IDFyZW07DQogICAgICAgIH0NCg0KICAgICAgICBoMSB7DQogICAgICAgICAgZm9udC1zaXplOiAycmVtOw0KICAgICAgICB9DQogICAgICB9DQogICAgPC9zdHlsZT4NCiAgPC9oZWFkPg0KICA8Ym9keT4NCiAgICA8aGVhZGVyPg0KICAgICAgPGgxPkxpdmU8L2gxPg0KICAgICAgPHAgY2xhc3M9InN1YnRpdGxlIj5VaGhoIHRyYWNrIHRoZSBhbW91bnQgb2YgdXNlcnMgb24geW91ciBhcHAhPC9wPg0KDQogICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3RhdHVzLWluZGljYXRvciI+DQogICAgICAgICAgPHNwYW4gaWQ9Im1haW4tZG90IiBjbGFzcz0ic3RhdHVzLWRvdCI+PC9zcGFuPg0KICAgICAgICAgIDxzcGFuIGlkPSJtYWluLWNvdW50ZXIiPkZldGNoaW5nLi4uPC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8cD48c3Ryb25nPkJhc2UgVVJMOjwvc3Ryb25nPiA8Y29kZT5odHRwczovL2xpdmUuYWxpbWFkLnh5ejwvY29kZT48L3A+DQogICAgICA8cD5UcmFjayB1c2VycyBpbiByZWFsLXRpbWUgdXNpbmcgaGFzaGVkIElQcy4gTm8gbG9naW4gb3IgY29uZmlnIG5lZWRlZDwvcD4NCiAgICA8L2hlYWRlcj4NCiAgICA8c2VjdGlvbj4NCiAgICAgIDxoMj5HZXQgU3RhcnRlZDwvaDI+DQogICAgICA8cD5UcnkgaXQgb3V0IHdpdGggeW91ciBvd24gQXBwIElEOjwvcD4NCg0KICAgICAgPGlucHV0DQogICAgICAgIHR5cGU9InRleHQiDQogICAgICAgIGlkPSJhcHBJbnB1dCINCiAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIHlvdXIgQXBwIElEIChlLmcuLCBteUF3ZXNvbWVBcHApIg0KICAgICAgLz4NCiAgICAgIDxkaXYgaWQ9ImVycm9yVGV4dCIgY2xhc3M9ImVycm9yLXRleHQiPjwvZGl2Pg0KICAgICAgPGRpdiBpZD0ic3VjY2Vzc1RleHQiIGNsYXNzPSJzdWNjZXNzLXRleHQiPjwvZGl2Pg0KDQogICAgICA8aDM+SFRNTCBFbWJlZCBDb2RlPC9oMz4NCiAgICAgIDxwPkNvcHkgdGhpcyBjb2RlIHRvIHNob3cgbGl2ZSB1c2VyIGNvdW50cyBvbiB5b3VyIHdlYnNpdGU6PC9wPg0KICAgICAgPHRleHRhcmVhIGlkPSJodG1sT3V0cHV0IiByZWFkb25seSByb3dzPSI2Ij48L3RleHRhcmVhPg0KICAgICAgPGJ1dHRvbiBpZD0iY29weUJ0biIgY2xhc3M9ImNvcHktYnRuIj5Db3B5IHRvIENsaXBib2FyZDwvYnV0dG9uPg0KICAgIDwvc2VjdGlvbj4NCiAgICA8c2VjdGlvbj4NCiAgICAgIDxoMj5Ib3cgSXQgV29ya3M8L2gyPg0KICAgICAgPG9sPg0KICAgICAgICA8bGk+WW91ciBhcHAgY2FsbHMgPGNvZGU+L3Bpbmc8L2NvZGU+IHdpdGggeW91ciB1bmlxdWUgQXBwIElEPC9saT4NCiAgICAgICAgPGxpPlRoZSBBUEkgcmVnaXN0ZXJzIHRoaXMgdXNlciBhcyAib25saW5lIjwvbGk+DQogICAgICAgIDxsaT5UaGUgQVBJIHJldHVybnMgdGhlIGN1cnJlbnQgbnVtYmVyIG9mIG9ubGluZSB1c2VyczwvbGk+DQogICAgICAgIDxsaT5Vc2VycyBhcmUgYXV0b21hdGljYWxseSByZW1vdmVkIGFmdGVyIDIgbWludXRlcyBvZiBpbmFjdGl2aXR5PC9saT4NCiAgICAgIDwvb2w+DQogICAgICA8cD5JIGd1ZXNzIHRoYXRzIGFsbDwvcD4NCiAgICA8L3NlY3Rpb24+DQoNCiAgICA8c2VjdGlvbj4NCiAgICAgIDxoMj5BUEkgRW5kcG9pbnRzPC9oMj4NCg0KICAgICAgPGRpdiBjbGFzcz0iZW5kcG9pbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJlbmRwb2ludC10aXRsZSI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9ImVuZHBvaW50LW1ldGhvZCI+R0VUPC9zcGFuPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbmRwb2ludC11cmwiPi9waW5nP2FwcD1bQXBwSWRdPC9zcGFuPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPHA+UmVnaXN0ZXJzIHRoaXMgdXNlciBhcyAib25saW5lIiBhbmQgcmV0dXJucyB0aGUgY3VycmVudCB1c2VyIGNvdW50IChpbmNsdWRpbmcgdGhpcyB1c2VyKS48L3A+DQoNCiAgICAgICAgPGgzPlBhcmFtZXRlcnM8L2gzPg0KICAgICAgICA8cD48c3Ryb25nPmFwcDwvc3Ryb25nPiAocmVxdWlyZWQpOiBZb3VyIHVuaXF1ZSBBcHAgSUQ8L3A+DQoNCiAgICAgICAgPGRldGFpbHM+DQogICAgICAgICAgPHN1bW1hcnk+QXBwIElEIE5hbWluZyBSdWxlczwvc3VtbWFyeT4NCiAgICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+NC02NCBjaGFyYWN0ZXJzIGxvbmc8L2xpPg0KICAgICAgICAgICAgPGxpPk11c3QgYmUgYSBzdHJpbmc8L2xpPg0KICAgICAgICAgICAgPGxpPk9ubHkgYWxwaGFiZXRzLCBudW1iZXJzLCBzbGFzaGVzLCAlLCBfLCAtLCBhbmQgLiBhcmUgYWxsb3dlZCA8L2xpPg0KICAgICAgICAgICAgPGxpPlBseiBkb250IGRvIFhTUyBwYXlsb2FkczwvbGk+DQogICAgICAgICAgPC9vbD4NCiAgICAgICAgPC9kZXRhaWxzPg0KDQogICAgICAgIDxoMz5SZXNwb25zZTwvaDM+DQogICAgICAgIDxwPlBsYWluIHRleHQgd2l0aCB0aGUgY3VycmVudCB1c2VyIGNvdW50PC9wPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InJlc3BvbnNlLWV4YW1wbGUiPg0KICAgICAgICAgIDxwPkV4YW1wbGUgcmVxdWVzdDo8L3A+DQogICAgICAgICAgPHByZT5HRVQgL3Bpbmc/YXBwPWNsaWVudF9vZl9tYWtpbmc8L3ByZT4NCg0KICAgICAgICAgIDxwPkV4YW1wbGUgcmVzcG9uc2U6PC9wPg0KICAgICAgICAgIDxwcmU+MTwvcHJlPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJlbmRwb2ludCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImVuZHBvaW50LXRpdGxlIj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0iZW5kcG9pbnQtbWV0aG9kIj5HRVQ8L3NwYW4+DQogICAgICAgICAgPHNwYW4gY2xhc3M9ImVuZHBvaW50LXVybCI+L2dldD9hcHA9W0FwcElkXTwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxwPkNoZWNrcyB0aGUgY3VycmVudCB1c2VyIGNvdW50IDxlbT53aXRob3V0PC9lbT4gcmVnaXN0ZXJpbmcgdGhpcyB1c2VyIGFzIG9ubGluZS48L3A+DQogICAgICAgIDxwPlJlc3BvbnNlIGZvcm1hdCBpcyB0aGUgc2FtZSBhcyA8Y29kZT4vcGluZzwvY29kZT4uPC9wPg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImVuZHBvaW50Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iZW5kcG9pbnQtdGl0bGUiPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbmRwb2ludC1tZXRob2QiPkdFVDwvc3Bhbj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0iZW5kcG9pbnQtdXJsIj4vbGVhdmU/YXBwPVtBcHBJZF08L3NwYW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8cD5NYW51YWxseSByZW1vdmVzIHlvdXIgdXNlciBmcm9tIHRoZSBvbmxpbmUgY291bnQuPC9wPg0KICAgICAgICA8cD5SZXNwb25zZTogPGNvZGU+RG9uZTwvY29kZT48L3A+DQogICAgICA8L2Rpdj4NCg0KICAgICAgPGRpdiBjbGFzcz0iZW5kcG9pbnQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJlbmRwb2ludC10aXRsZSI+DQogICAgICAgICAgPHNwYW4gY2xhc3M9ImVuZHBvaW50LW1ldGhvZCI+R0VUPC9zcGFuPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbmRwb2ludC11cmwiPi9zdGF0cz9hcHA9W0FwcElkXTwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxwPlJldHVybnMgc3RhdGlzdGljcyBhYm91dCB5b3VyIGFwcCdzIHVzYWdlIGluIEpTT04gZm9ybWF0LjwvcD4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJyZXNwb25zZS1leGFtcGxlIj4NCiAgICAgICAgICA8cD5FeGFtcGxlIHJlcXVlc3Q6PC9wPg0KICAgICAgICAgIDxwcmU+R0VUIC9zdGF0cz9hcHA9bGl2ZTwvcHJlPg0KDQogICAgICAgICAgPHA+RXhhbXBsZSByZXNwb25zZTo8L3A+DQogICAgICAgICAgPHByZT57DQogICJsYXN0UGluZyI6IDE3NTEyNTY1MTUxMzYsDQogICJtYXhDb25jdXJyZW50Ijogew0KICAgICIyMDI1LTA2LTMwVDA5OjAwOjAwLjAwMFoiOiAxLA0KICAgICJvdmVyYWxsIjogMQ0KICB9LA0KICAicGluZ3MiOiB7DQogICAgIjIwMjUtMDYtMzBUMDk6MDA6MDAuMDAwWiI6IDI2DQogIH0sDQogICJ0b3RhbFBpbmdzIjogMjYsDQogICJ1bmlxdWVJZHMiOiAxDQp9PC9wcmU+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8c2VjdGlvbj4NCiAgICAgICAgICA8aDI+RGVtbzwvaDI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJncmlkLWl0ZW0iPg0KICAgICAgICAgICAgICA8ZGl2IGlkPSJsaXZlLXN0YXRzIj5Mb2FkaW5nIHN0YXRzLi4uPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9zZWN0aW9uPg0KICAgICAgPC9kaXY+DQoNCiAgICAgIDxkaXYgY2xhc3M9ImVuZHBvaW50Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iZW5kcG9pbnQtdGl0bGUiPg0KICAgICAgICAgIDxzcGFuIGNsYXNzPSJlbmRwb2ludC1tZXRob2QiPkdFVDwvc3Bhbj4NCiAgICAgICAgICA8c3BhbiBjbGFzcz0iZW5kcG9pbnQtdXJsIj4vc3RhdHMvdmlldz9hcHA9W0FwcElkXTwvc3Bhbj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxwPlZpZXcgeW91ciBzdGF0cyBpbiBhIHByZXR0eSBIVE1MIHBhZ2UgKGdyZWF0IGZvciBxdWljayBjaGVja3MpLjwvcD4NCiAgICAgICAgPGlmcmFtZSBzcmM9Ii9zdGF0cy92aWV3P2FwcD1saXZlIiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSI1MDBweCI+PC9pZnJhbWU+DQogICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQoNCiAgICA8c2VjdGlvbj4NCiAgICAgIDxoMj5TdGF0dXMgQ29kZXM8L2gyPg0KICAgICAgPGRpdiBjbGFzcz0iZ3JpZCI+DQogICAgICAgIDxkaXYgY2xhc3M9ImdyaWQtaXRlbSI+DQogICAgICAgICAgPGgzPjIwMCBPSzwvaDM+DQogICAgICAgICAgPHA+RXZlcnl0aGluZyB3b3JrZWQgYXMgZXhwZWN0ZWQuPC9wPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iZ3JpZC1pdGVtIj4NCiAgICAgICAgICA8aDM+NDAwIEJhZCBSZXF1ZXN0PC9oMz4NCiAgICAgICAgICA8cD5NaXNzaW5nIG9yIGludmFsaWQgQXBwIElELjwvcD4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImdyaWQtaXRlbSI+DQogICAgICAgICAgPGgzPjQwMyBGb3JiaWRkZW48L2gzPg0KICAgICAgICAgIDxwPllvdXIgQXBwIElEIGNvbnRhaW5zIGZvcmJpZGRlbiBjaGFyYWN0ZXJzLiA8aW1nIGNsYXNzPSJlbW9qaSIgd2lkdGg9IjMycHgiIGhlaWdodD0iMzJweCIgc3JjPSJodHRwczovL2Vtb2ppLnNsYWNrLWVkZ2UuY29tL1QwMjY2RlJHTS9za3Vsay9iNTE1N2JjYzE2ZjVkMmFjLnBuZyI+PC9wPg0KICAgICAgICAgIDxwPkkgVE9MRCBZT1UgTk9UIFRPIFRSWSBYU1MgUEFZTE9BRFMgPGltZyBjbGFzcz0iZW1vamkiIHdpZHRoPSIzMnB4IiBoZWlnaHQ9IjMycHgiIHNyYz0iaHR0cHM6Ly9lbW9qaS5zbGFjay1lZGdlLmNvbS9UMDI2NkZSR00vaGVhdnlzb2IvNTViZjA5ZjZjOWQ5M2QwOC5wbmciPjwvcD4gDQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJncmlkLWl0ZW0iPg0KICAgICAgICAgIDxoMz40MjkgVG9vIE1hbnkgUmVxdWVzdHM8L2gzPg0KICAgICAgICAgIDxwPkNoaWxsIGJybywgaXQncyAyMCByZXF1ZXN0cyBwZXIgbWludXRlLiBQbGVhc2UgZG8gYXQgbW9zdCBvbmUgcmVxdWVzdCBwZXIgNSBzZWNvbmRzPC9wPg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KICAgIDwvc2VjdGlvbj4NCg0KICAgIDxmb290ZXIgc3R5bGU9Im1hcmdpbi10b3A6IDNyZW07IGJvcmRlci10b3A6IDFweCBzb2xpZCAjMzMzOyBwYWRkaW5nLXRvcDogMXJlbTsgdGV4dC1hbGlnbjogY2VudGVyOyI+DQogICAgICA8cD5NYWRlIGJ5IDxhIGhyZWY9Imh0dHBzOi8vYWxpbWFkLnh5eiI+TXVoYW1tYWQgQWxpPC9hPiZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOzxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9hbGltYWRjb3JwL2lzb25saW5lIj5HaXRodWIgUmVwbzwvYT4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsmY29weTsgQWxpbWFkIFN1cnZpZWxsYW5jZS4gQWxsIHJpZ2h0cyByZXNlcnZlZDwvcD4NCiAgICA8L2Zvb3Rlcj4NCg0KICAgIDxzY3JpcHQ+DQogICAgICBhc3luYyBmdW5jdGlvbiB1cGRhdGVNYWluQ291bnRlcigpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgiL3Bpbmc/YXBwPWxpdmUiKTsNCiAgICAgICAgICBpZiAocmVzLm9rKSB7DQogICAgICAgICAgICBjb25zdCB0eHQgPSBhd2FpdCByZXMudGV4dCgpOw0KICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1haW4tZG90IikuY2xhc3NMaXN0LmFkZCgib25saW5lIik7DQogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWFpbi1jb3VudGVyIikudGV4dENvbnRlbnQgPSBgJHt0eHR9IHBlb3BsZSBhcmUgY3VycmVudGx5IHZpZXdpbmcgdGhpcyBwYWdlYDsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJTZXJ2ZXIgZXJyb3IiKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKGVycikgew0KICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYWluLWRvdCIpLmNsYXNzTGlzdC5yZW1vdmUoIm9ubGluZSIpOw0KICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYWluLWNvdW50ZXIiKS50ZXh0Q29udGVudCA9ICJPZmZsaW5lIC0gZmFpbGVkIHRvIGNvbm5lY3QgdG8gQVBJIjsNCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICBhc3luYyBmdW5jdGlvbiBwaW5nVGVzdCgpIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgiL3Bpbmc/YXBwPWxpdmUiKTsNCiAgICAgICAgICBpZiAocmVzLm9rKSB7DQogICAgICAgICAgICBjb25zdCB0eHQgPSBhd2FpdCByZXMudGV4dCgpOw0KICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBpbmctZG90IikuY2xhc3NMaXN0LmFkZCgib25saW5lIik7DQogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGluZy10ZXN0IikudGV4dENvbnRlbnQgPSBgJHt0eHR9IHBlb3BsZSBhcmUgY3VycmVudGx5IHZpZXdpbmcgdGhpcyBwYWdlYDsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gZmV0Y2giKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwaW5nLWRvdCIpLmNsYXNzTGlzdC5yZW1vdmUoIm9ubGluZSIpOw0KICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwaW5nLXRlc3QiKS50ZXh0Q29udGVudCA9ICJGYWlsZWQgdG8gZmV0Y2ggZGF0YSI7DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgYXN5bmMgZnVuY3Rpb24gbG9hZFN0YXRzKCkgew0KICAgICAgICB0cnkgew0KICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCIvc3RhdHM/YXBwPWxpdmUiKTsNCiAgICAgICAgICBpZiAocmVzLm9rKSB7DQogICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTsNCiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsaXZlLXN0YXRzIikuaW5uZXJIVE1MID0gYA0KICAgICAgICAgICAgICA8cD5Ub3RhbCBwaW5nczogPHN0cm9uZz4ke2RhdGEudG90YWxQaW5ncyB8fCAwfTwvc3Ryb25nPjwvcD4NCiAgICAgICAgICAgICAgPHA+VW5pcXVlIHVzZXJzOiA8c3Ryb25nPiR7ZGF0YS51bmlxdWVJZHMgfHwgMH08L3N0cm9uZz48L3A+DQogICAgICAgICAgICAgIDxwPkxhc3QgYWN0aXZpdHk6IDxzdHJvbmc+JHtuZXcgRGF0ZShkYXRhLmxhc3RQaW5nIHx8IDApLnRvTG9jYWxlU3RyaW5nKCl9PC9zdHJvbmc+PC9wPg0KICAgICAgICAgICAgYDsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJGYWlsZWQgdG8gZmV0Y2ggc3RhdHMiKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsaXZlLXN0YXRzIikuaW5uZXJIVE1MID0gIkZhaWxlZCB0byBsb2FkIHN0YXRpc3RpY3MiOw0KICAgICAgICB9DQogICAgICB9DQogICAgICBmdW5jdGlvbiB2YWxpZGF0ZShhcHApIHsNCiAgICAgICAgaWYgKCFhcHApIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6ICJQbGVhc2UgZW50ZXIgYW4gQXBwIElEIiB9Ow0KICAgICAgICBpZiAodHlwZW9mIGFwcCAhPT0gInN0cmluZyIpIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6ICJBcHAgSUQgbXVzdCBiZSB0ZXh0IiB9Ow0KICAgICAgICBpZiAoYXBwLmxlbmd0aCA+IDY0KSByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiAiTWF4aW11bSBsZW5ndGggaXMgNjQgY2hhcmFjdGVycyIgfTsNCiAgICAgICAgaWYgKGFwcC5sZW5ndGggPCA0KSByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiAiQXBwIElEIG11c3QgYmUgYXQgbGVhc3QgNCBjaGFyYWN0ZXJzIiB9Ow0KICAgICAgICBhcHAgPSBlbmNvZGVVUklDb21wb25lbnQoYXBwKTsNCiAgICAgICAgaWYoIS9eW0EtWmEtejAtOVwvXDpcLlxcX1wlXC1dKyQvLnRlc3Qoc3RyKSl7DQogICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgIHZhbGlkOiBmYWxzZSwNCiAgICAgICAgICAgIGVycm9yOiAiT25seSBhbHBoYWJldHMsIG51bWJlcnMsIHNsYXNoZXMsICUsIF8sIC0sIGFuZCAuIGFyZSBhbGxvd2VkIiwNCiAgICAgICAgICAgIHR5cGU6ICJmb3JiaWRkZW4iLA0KICAgICAgICAgIH07DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTsNCiAgICAgIH0NCg0KICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwcElucHV0IikuYWRkRXZlbnRMaXN0ZW5lcigiaW5wdXQiLCAoZSkgPT4gew0KICAgICAgICBjb25zdCBhcHAgPSBlLnRhcmdldC52YWx1ZS50cmltKCk7DQogICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJlcnJvclRleHQiKTsNCiAgICAgICAgY29uc3Qgc3VjY2Vzc1RleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3VjY2Vzc1RleHQiKTsNCiAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGUoYXBwKTsNCg0KICAgICAgICBlcnJvclRleHQudGV4dENvbnRlbnQgPSAiIjsNCiAgICAgICAgc3VjY2Vzc1RleHQudGV4dENvbnRlbnQgPSAiIjsNCiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgiZXJyb3IiKTsNCg0KICAgICAgICBpZiAoIXJlc3VsdC52YWxpZCkgew0KICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoImVycm9yIik7DQogICAgICAgICAgZXJyb3JUZXh0LnRleHRDb250ZW50ID0gcmVzdWx0LmVycm9yOw0KICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJodG1sT3V0cHV0IikudmFsdWUgPSAiIjsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBzdWNjZXNzVGV4dC50ZXh0Q29udGVudCA9ICJMb29rcyBnb29kISBDb3B5IHRoZSBlbWJlZCBjb2RlIGJlbG93LiI7DQoNCiAgICAgICAgY29uc3QgaHRtbCA9IGA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9saXZlLmFsaW1hZC54eXovc3RhdHMvdmlldz9hcHA9JHthcHB9Ij48ZGl2IGlkPSJsaXZlLWNvdW50ZXIiIHN0eWxlPSJmb250LWZhbWlseTogc2Fucy1zZXJpZjsgY29sb3I6ICM0Q0FGNTA7IGRpc3BsYXk6IGlubGluZS1mbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyBnYXA6IDZweDsiPg0KICA8c3BhbiBzdHlsZT0id2lkdGg6IDEwcHg7IGhlaWdodDogMTBweDsgYm9yZGVyLXJhZGl1czogNTAlOyBiYWNrZ3JvdW5kOiAjNENBRjUwOyIgaWQ9ImxpdmUtZG90Ij48L3NwYW4+DQogIDxzcGFuIGlkPSJsaXZlLWNvdW50Ij5Mb2FkaW5nLi4uPC9zcGFuPg0KPC9kaXY+PC9hPg0KPHNjcmlwdD4NCmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUdsb2JhbEFwcFVzZXJDb3VudCgpIHsNCiAgY29uc3QgZG90ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpdmUtZG90Jyk7DQogIGNvbnN0IGNvdW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpdmUtY291bnQnKTsNCiAgdHJ5IHsNCiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2xpdmUuYWxpbWFkLnh5ei9waW5nP2FwcD0ke2FwcH0nKTsNCiAgICBpZiAocmVzcG9uc2Uub2spIHsNCiAgICAgIGNvbnN0IHVzZXJDb3VudCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTsNCiAgICAgIGRvdC5zdHlsZS5iYWNrZ3JvdW5kID0gJyM0Q0FGNTAnOw0KICAgICAgY291bnQudGV4dENvbnRlbnQgPSB1c2VyQ291bnQgKyAnIG9ubGluZSc7DQogICAgfSBlbHNlIHsNCiAgICAgIHRocm93IG5ldyBFcnJvcignQVBJIGVycm9yJyk7DQogICAgfQ0KICB9IGNhdGNoIChlcnJvcikgew0KICAgIGRvdC5zdHlsZS5iYWNrZ3JvdW5kID0gJyNmNDQzMzYnOw0KICAgIGNvdW50LnRleHRDb250ZW50ID0gJ09mZmxpbmUnOw0KICB9DQp9Ow0Kc2V0SW50ZXJ2YWwodXBkYXRlR2xvYmFsQXBwVXNlckNvdW50LCAyMDAwMCk7DQo8XC9zY3JpcHQ+YDsNCg0KICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaHRtbE91dHB1dCIpLnZhbHVlID0gaHRtbDsNCiAgICAgIH0pOw0KICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNvcHlCdG4iKS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsICgpID0+IHsNCiAgICAgICAgY29uc3QgdGV4dGFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaHRtbE91dHB1dCIpOw0KICAgICAgICB0ZXh0YXJlYS5zZWxlY3QoKTsNCiAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoImNvcHkiKTsNCg0KICAgICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY29weUJ0biIpOw0KICAgICAgICBidG4udGV4dENvbnRlbnQgPSAiQ29waWVkISI7DQogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICAgIGJ0bi50ZXh0Q29udGVudCA9ICJDb3B5IHRvIENsaXBib2FyZCI7DQogICAgICAgIH0sIDIwMDApOw0KICAgICAgfSk7DQogICAgICB1cGRhdGVNYWluQ291bnRlcigpOw0KICAgICAgcGluZ1Rlc3QoKTsNCiAgICAgIGxvYWRTdGF0cygpOw0KICAgICAgc2V0SW50ZXJ2YWwodXBkYXRlTWFpbkNvdW50ZXIsIDUwMDApOw0KICAgICAgc2V0SW50ZXJ2YWwocGluZ1Rlc3QsIDE1MTAwKTsNCiAgICAgIHNldEludGVydmFsKGxvYWRTdGF0cywgMTUyMDApOw0KICAgIDwvc2NyaXB0Pg0KICA8L2JvZHk+DQo8L2h0bWw+`; 
module.exports = { page }; 